require "pathname"

BASEDIR = Pathname(__dir__)
EXPORTPATH = BASEDIR + "include/mruby-aux/version.h"

versions = [
  10200, 10300, 10400, 10401,
  20000, 20001, 20100, 20101, 20102,
  30000, 30100
]
versions.sort!
versions << versions[-1] + 1
versions.reverse!

out = <<~HEADER
/*
 * @file #{EXPORTPATH.basename}
 *
 * This file is auto generated by mruby-aux/#{File.basename(__FILE__)}.
 * THE DATA YOU CHANGED WILL BE LOST.
 */

#ifndef MRUBY_AUX_VERSION_H
#define MRUBY_AUX_VERSION_H 1

#include <mruby.h>
#include <mruby/version.h>

HEADER

versions.each_with_index do |v, i|
  case
  when i == 0
    out << <<~IF
      #if MRUBY_RELEASE_NO >= #{v} || defined(mrb_bigint_p)
    IF
  when v == versions[-1]
    out << <<~ELSE
      #else
    ELSE
  else
    out << <<~ELIF
      #elif MRUBY_RELEASE_NO >= #{v}
    ELIF
  end

  out << <<~RELEASE_NO
    # define MRBX_MRUBY_RELEASE_NO #{v}
  RELEASE_NO
end

out << <<~ENDIF
  #endif
ENDIF

versions.each do |v|
  out << <<~NEWER

    #if MRBX_MRUBY_RELEASE_NO >= #{v}
    # define MRBX_VERSION_NEWER_OR_#{v}_P 1
    #else
    # define MRBX_VERSION_NEWER_OR_#{v}_P 0
    #endif
  NEWER
end

versions.each do |v|
  out << <<~OLDER

    #if MRBX_MRUBY_RELEASE_NO <= #{v}
    # define MRBX_VERSION_OLDER_OR_#{v}_P 1
    #else
    # define MRBX_VERSION_OLDER_OR_#{v}_P 0
    #endif
  OLDER
end

out << <<~FOOTER

  #endif /* MRUBY_AUX_VERSION_H */
FOOTER

EXPORTPATH.binwrite(out)
